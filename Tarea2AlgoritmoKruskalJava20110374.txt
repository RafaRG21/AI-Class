package kruskal;

import java.util.*;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;

public class NodoGrafico {
    private int x ,y;
    String nombre;
    public static final int d = 70;

    public NodoGrafico(int x, int y,String nombre) {
        this.x = x;
        this.y = y;
        this.nombre = nombre;
    }//constructor

    public void dibujar(Graphics g){
        g.setColor(Color.BLACK);
        g.drawOval(this.x-d/2,this.y-d/2,d,d);
        g.setColor(Color.BLUE);
        g.drawString(nombre,x,y);
    }//dibujar

    public String getNombre() {
        return nombre;
    }//getNombre

    public void setNombre(String x) {
        this.nombre = x;
    }//setNombre

    public int getX() {
        return x;
    }//getX

    public void setX(int x) {
        this.x = x;
    }//setX

    public int getY() {
        return y;
    }//getY

    public void setY(int y) {
        this.y = y;
    }//setY
}//NodoGrafico


public class AristaGrafico {
    private int x1,y1,x2,y2;
    String src, dest;
    private int peso;

    public AristaGrafico(int x1, int y1, int x2, int y2,int peso,String src, String dest) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
        this.peso = peso;
        this.src = src;
        this.dest = dest;
    }//constructor

    public void dibujarArista(Graphics g,Color c){
        g.setColor(c);
        g.drawLine(x1,y1,x2,y2);
        g.setColor(Color.RED);
        if (x1 > x2 && y1 > y2)
            g.drawString(String.valueOf(peso),x1 - Math.abs((x1 - x2)/2), y1 - Math.abs((y1 - y2)/2));
        if (x1 < x2 && y1 < y2)
            g.drawString(String.valueOf(peso),x2 - Math.abs((x1 - x2)/2), y2 - Math.abs((y1 - y2)/2));
        if (x1 < x2 && y1 > y2)
            g.drawString(String.valueOf(peso),x2 - Math.abs((x1 - x2)/2), y1 - Math.abs((y1 - y2)/2));
        if (x1 > x2 && y1 < y2)
            g.drawString(String.valueOf(peso),x1 - Math.abs((x1 - x2)/2), y2 - Math.abs((y1 - y2)/2));


    }//dibujarArista

    public int getX1() {
        return x1;
    }//getX1

    public void setX1(int x1) {
        this.x1 = x1;
    }//setX1

    public int getY1() {
        return y1;
    }//getY1

    public void setY1(int y1) {
        this.y1 = y1;
    }//setY1

    public int getX2() {
        return x2;
    }//getX2

    public void setX2(int x2) {
        this.x2 = x2;
    }//setX2

    public int getY2() {
        return y2;
    }//getY2

    public void setY2(int y2) {
        this.y2 = y2;
    }//setY2
    public int getPeso() {
        return peso;
    }//getPeso

    public void setPeso(int peso) {
        this.peso = peso;
    }//setPeso

    public String getSrc() {
        return src;
    }//getSrc

    public void setSrc(String src) {
        this.src = src;
    }//setSrc

    public String getDest() {
        return dest;
    }//getDest

    public void setDest(String dest) {
        this.dest = dest;
    }//setDest
}//AristaGrafico


class DisjointSet {   
    public static int totalWeigth = 0;
    Map<String, String> parent = new HashMap<>();

    public void makeSet(List<AristaGrafico> aristas) {
        System.out.println("aristas= "+aristas);

        // se crea el set disjunto (uno para cada nodo)
        for (int i = 0; i < aristas.size();i++) {

            parent.put(aristas.get(i).src,aristas.get(i).src);
            parent.put(aristas.get(i).dest,aristas.get(i).dest);
            System.out.println("n= "+i+": "+parent);
        }
        System.out.println(parent);
    }//makeSet

    // Se encuentra la raiz del set donde pertenezca k
    private String find(String k) {
        // Si k es raíz
        System.out.println("Parent: " +parent.get(k)+" k: "+k);
        if (parent.get(k).equals(k)) {
            return k;
        }

        // se llama el metodo a si mismo hasta encontrar la raiz
        return find(parent.get(k));
    }//find


    private void union(String a, String b) {
        //  Se encuentra la raiz de los sets donde pertenezcan x e y
        String x = find(a);
        String y = find(b);

        parent.put(x, y);
    }//union

    // Algoritmo Kruskal
    public static List<AristaGrafico> runKruskalAlgorithm(List<AristaGrafico> aristas, int n) {
        totalWeigth = 0;
        //se guardan las aristas en MST
        List<AristaGrafico> MST = new ArrayList<>();


        DisjointSet ds = new DisjointSet();
        ds.makeSet(aristas);

        int index = 0;

        // se ordena las aristas por peso
        Collections.sort(aristas, Comparator.comparingInt(e -> e.getPeso()));


        while (MST.size() != n - 1)
        {
            AristaGrafico siguienteArista = aristas.get(index++);


            String x = ds.find(siguienteArista.src);
            String y = ds.find(siguienteArista.dest);

            // se comprueba que tengan diferentes padres para que no se cicle
            if (!x.equals(y))
            {
                MST.add(siguienteArista);
                ds.union(x, y);
                totalWeigth += siguienteArista.getPeso();
            }
        }//while

        return MST;
    }//runKruskalAlgorithm
}//class DisjointSet


public class Lienzo extends JPanel implements MouseListener, MouseMotionListener {

    private ArrayList<NodoGrafico> arrayNodosG;
    private ArrayList<AristaGrafico> aristaGraficos;
    private Point p1, p2;
    private NodoGrafico nodoMover;
    private boolean buttonPressed = false;
    private int iNodo;
    JButton obtainAEM;
    String src, dest;
    List<AristaGrafico> kruskal;



    public Lienzo(){
        this.arrayNodosG = new ArrayList<>();
        this.aristaGraficos = new ArrayList<>();
        this.addMouseListener(this);
        this.addMouseMotionListener(this);
         this.obtainAEM = new JButton("Obtner AEM");
        this.add(obtainAEM);
        this.obtainAEM.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<AristaGrafico> aristasAux = new ArrayList<>();
                for(AristaGrafico arista : aristaGraficos) {
                    aristasAux.add(arista);
                }
                 kruskal = DisjointSet.runKruskalAlgorithm(aristasAux,arrayNodosG.size());
                buttonPressed = true;
                repaint();
                String mensaje = "Árbol de expansión mínimo:\n";
                for(AristaGrafico arista : kruskal)
                    mensaje += arista.src + " - " +arista.dest+ " : " +arista.getPeso() +"\n";
                mensaje += "Peso total: " + DisjointSet.totalWeigth;

                JOptionPane.showMessageDialog(Lienzo.this, mensaje, "Algoritmo ejecutado", JOptionPane.INFORMATION_MESSAGE);
            }
        });//addActionListener
        
    }//constructor


    @Override
    public void paint(Graphics g) {
        super.paint(g);

        for (NodoGrafico nodoGrafico : arrayNodosG)
            nodoGrafico.dibujar(g);

        for (AristaGrafico arista : aristaGraficos)
            arista.dibujarArista(g,Color.BLACK);
        if(buttonPressed){
            for (AristaGrafico arista : kruskal)
                arista.dibujarArista(g,Color.green);
            buttonPressed = false;
            DisjointSet.totalWeigth  = 0;
        }
        
    }//paint

    @Override
    public void mouseClicked(MouseEvent e) {
        if(e.getButton() == MouseEvent.BUTTON1){
            String nombreNodo = JOptionPane.showInputDialog("Ingresar nombre del nodo:");
            this.arrayNodosG.add(new NodoGrafico(e.getX(),e.getY(),nombreNodo));
           repaint();
        }

        if (e.getButton() == MouseEvent.BUTTON3){

            for (NodoGrafico nodo : arrayNodosG){
                if (new Rectangle(nodo.getX() - NodoGrafico.d/2,nodo.getY() - NodoGrafico.d/2,NodoGrafico.d,NodoGrafico.d).contains(e.getPoint())){
                    if (p1 == null){
                        p1 = new Point(nodo.getX(),nodo.getY());
                        src = nodo.getNombre();
                    }else{
                        p2 = new Point(nodo.getX(),nodo.getY());
                        dest = nodo.getNombre();
                        String input;
                        int peso = 0;
                        do {
                            input = JOptionPane.showInputDialog("Ingresar peso de la arista:");
                            if (input.matches("^[0-9]*$")) {
                                peso = Integer.parseInt(input);
                                this.aristaGraficos.add(new AristaGrafico(p1.x,p1.y,p2.x,p2.y,peso,src,dest));
                                System.out.println("Source: "+src+" Dest: "+dest);
                            } else {
                                JOptionPane.showMessageDialog(this, "Ingrese sólo números", "ERROR", JOptionPane.WARNING_MESSAGE);
                            }
                        } while (!input.matches("^[0-9]*$"));
                        repaint();
                        p1 = p2 = null;
                    }
                }
            }
        }
    }//mouseClicked

    @Override
    public void mousePressed(MouseEvent e) {
        int iN = 0;
        for (NodoGrafico nodo : arrayNodosG){
            if(new Rectangle(nodo.getX() - NodoGrafico.d/2,nodo.getY() - NodoGrafico.d/2,NodoGrafico.d,NodoGrafico.d).contains(e.getPoint())){
                nodoMover = nodo;
                iNodo = iN;
                break;
            }
            iN++;
        }
    }//mousePressed

    @Override
    public void mouseReleased(MouseEvent e) {
        nodoMover = null;
        iNodo = -1;
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (nodoMover != null){
            this.arrayNodosG.set(iNodo,new NodoGrafico(e.getX(),e.getY(),nodoMover.nombre));
            int iA = 0;
            for (AristaGrafico arista : aristaGraficos){
                if (new Rectangle(arista.getX1() - NodoGrafico.d/2, arista.getY1() - NodoGrafico.d/2,NodoGrafico.d,NodoGrafico.d).contains(e.getPoint())){
                    this.aristaGraficos.set(iA,new AristaGrafico(e.getX(),e.getY(),arista.getX2(),arista.getY2(),arista.getPeso(),arista.getSrc(),arista.getDest()));
                } else if (new Rectangle(arista.getX2() - NodoGrafico.d/2, arista.getY2() - NodoGrafico.d/2,NodoGrafico.d,NodoGrafico.d).contains(e.getPoint())){
                    this.aristaGraficos.set(iA,new AristaGrafico(arista.getX1(),arista.getY1(),e.getX(),e.getY(),arista.getPeso(),arista.getSrc(),arista.getDest()));
                }
                iA++;
            }//for
        }
        repaint();
    }//mouseDragged

    @Override
    public void mouseMoved(MouseEvent e) {

    }
}//Lienzo

public class Grafo {
    public static void main(String[] args) {
        JFrame window = new JFrame("Algoritmo de Kruskal 20110374");
        window.add(new Lienzo());
        window.setSize(700,700);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setVisible(true);

    }//main
}//Grafo